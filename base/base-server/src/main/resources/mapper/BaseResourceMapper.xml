<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ulyer.baseserver.mapper.BaseResourceMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="cn.ulyer.baseclient.entity.BaseResource">
        <id column="resourceId" property="resourceId"/>
        <result column="path" property="path"/>
        <result column="authority" property="authority"/>
        <result column="needAuth" property="needAuth"/>
        <result column="isPublic" property="isPublic"/>
        <result column="status" property="status"/>
        <result column="serviceId" property="serviceId"/>
        <result column="resourceName" property="resourceName"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
    </resultMap>


    <resultMap id="authorityMap" type="cn.ulyer.common.oauth.Oauth2Authority">
        <result column="resourceId" property="resourceId"/>
        <result column="authority" property="authority"/>
        <result column="expireTime" property="expireTime"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        resourceId, path, authority, needAuth, isPublic, status, serviceId, resourceName, createTime, updateTime
    </sql>
    <select id="listResourcesByRoles" resultMap="authorityMap">
        select resourceId,authority from base_resource
        where resourceId in (
        select resourceId from base_role_resource
        where roleId in (
        <foreach collection="roles" item="roleId" separator=",">
            #{roleId,jdbcType=BIGINT}
        </foreach>
        )
        )

    </select>
    <select id="listResourceVo" resultType="cn.ulyer.baseclient.vo.ResourceVo">
        select resource.*,server.serviceName resourceServerName from base_resource resource inner join
        base_resource_server server on resource.serviceId = server.serviceId
        <where>
            <if test="resourceName!=null and resourceName!=''">
                resource.resourceName = #{resourceName,jdbcType=VARCHAR}
            </if>
            <if test="path!=null and path!=''">
                and resource.path = #{path,jdbcType=VARCHAR}
            </if>
            <if test="serviceId!=null and serviceId!=''">
                and server.serviceId = #{serviceId,jdbcType=VARCHAR}
            </if>
            <if test="status!=null and status!=''">
                and resource.status = #{status,jdbcType=VARCHAR}
            </if>
        </where>
        order by resource.createTime desc


    </select>
    <select id="listResourceVoByRoleId" resultType="cn.ulyer.baseclient.vo.ResourceVo">
        select resource.*,server.serviceName resourceServerName from base_resource resource
        inner join base_resource_server server on resource.serviceId = server.serviceId
        where resourceId in (
        select resourceId from base_role_resource
        where roleId = #{roleId,jdbcType=BIGINT}

        )
    </select>
    <select id="listAuthorityByAppId" resultType="cn.ulyer.common.oauth.Oauth2Authority">
        select resource.resourceId,resource.authority,relation.expireTime from base_resource resource inner join base_app_resource relation
                                                                                      on resource.resourceId = relation.resourceId
        where relation.appId = #{appId,jdbcType=BIGINT}
    </select>
    <select id="listAuthorityVoByAppId" resultType="cn.ulyer.baseclient.vo.AuthorityVo">
        select resource.*,server.serviceName resourceServerName,relation.expireTime,relation.id appResourceId from base_resource resource left join
                                                                     base_resource_server server on resource.serviceId = server.serviceId
            inner join base_app_resource relation on resource.resourceId = relation.resourceId
        where relation.appId = #{appId,jdbcType=BIGINT}
    </select>

</mapper>
